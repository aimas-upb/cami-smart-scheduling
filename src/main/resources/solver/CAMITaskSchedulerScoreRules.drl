package solver;
	dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ActivityDomain;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ActivityCategory;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ActivityType;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ActivityPeriod
import org.aimas.cami.scheduler.CAMIScheduler.domain.Activity;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ActivitySchedule;
import org.aimas.cami.scheduler.CAMIScheduler.domain.RelativeActivity;
import org.aimas.cami.scheduler.CAMIScheduler.domain.RelativeActivityPenalty;
import org.aimas.cami.scheduler.CAMIScheduler.domain.RelativeType;
import org.aimas.cami.scheduler.CAMIScheduler.domain.ExcludedTimePeriodsPenalty;
import org.aimas.cami.scheduler.CAMIScheduler.domain.WeekDay;
import org.aimas.cami.scheduler.CAMIScheduler.domain.Time;
import org.aimas.cami.scheduler.CAMIScheduler.domain.Difficulty;
import org.aimas.cami.scheduler.CAMIScheduler.domain.WeekDays;
import org.aimas.cami.scheduler.CAMIScheduler.domain.TimeInterval;
import org.aimas.cami.scheduler.CAMIScheduler.domain.PeriodInterval;
import org.aimas.cami.scheduler.CAMIScheduler.utils.StaticPenaltyScoresDrools;
import org.aimas.cami.scheduler.CAMIScheduler.utils.AdjustActivityPeriod;
import org.aimas.cami.scheduler.CAMIScheduler.utils.DaysPatterns;

import function org.aimas.cami.scheduler.CAMIScheduler.utils.Utility.helper;
import function org.aimas.cami.scheduler.CAMIScheduler.utils.Utility.help;
import function org.aimas.cami.scheduler.CAMIScheduler.utils.Utility.stringToCharacterSet;
import function org.aimas.cami.scheduler.CAMIScheduler.utils.Utility.checkTimeslots;
import function org.aimas.cami.scheduler.CAMIScheduler.utils.Utility.getNumberOfMinutesInPermittedInterval;

import java.util.List;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Arrays;

global HardSoftScoreHolder scoreHolder;
/*
rule "a"
	when
		$activity1 : Activity(activityPeriod != null, $activityPeriod1 : activityPeriod, $id : id)
	then
		if ($activity1.getActivityType().getCode().equals("Hair cutting appointment"))
			System.out.println($activity1.getActivityType().getCode());
end
*/

// HARD CONSTRAINTS
// a rule for activity periods conflict
rule "periodConflict"
	when
		$activity1 : Activity(activityPeriod != null, $activityPeriod1 : activityPeriod, $id : id)
		$activity2 : Activity(activityPeriod != null, $activityPeriod2 : activityPeriod, $activityPeriod1.weekDay.dayIndex == activityPeriod.weekDay.dayIndex, this != $activity1, $id < id)
	then
		//helper(drools);

		if ($activityPeriod1.getPeriodHour() == $activityPeriod2.getPeriodHour() && 
			$activityPeriod1.getPeriodMinutes() == $activityPeriod2.getPeriodMinutes()) {

			scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.periodConflictPenalty);

		} else if (($activityPeriod1.getPeriodHour() > $activityPeriod2.getPeriodHour() && 
				$activityPeriod1.getPeriodHour() < $activity2.getActivityEndPeriod().getPeriodHour()) || 
				($activityPeriod1.getPeriodHour() < $activityPeriod2.getPeriodHour() && 
				$activity1.getActivityEndPeriod().getPeriodHour() > $activityPeriod2.getPeriodHour())) {

			scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.periodConflictPenalty);

		} else if ($activityPeriod1.getPeriodHour() == $activityPeriod2.getPeriodHour()) {

			if ($activityPeriod1.getPeriodMinutes() < ($activityPeriod2.getPeriodMinutes() + $activity2.getActivityDuration()) || 
				$activityPeriod2.getPeriodMinutes() < ($activityPeriod1.getPeriodMinutes() + $activity1.getActivityDuration()))

				scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.periodConflictPenalty);

		} else if ($activityPeriod1.getPeriodHour() == $activity2.getActivityEndPeriod().getPeriodHour()) {

			if ($activityPeriod1.getPeriodMinutes() < $activity2.getActivityEndPeriod().getPeriodMinutes())
				scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.periodConflictPenalty);

		} else if ($activity1.getActivityEndPeriod().getPeriodHour() == $activityPeriod2.getPeriodHour()) {

			if ($activityPeriod2.getPeriodMinutes() < $activity1.getActivityEndPeriod().getPeriodMinutes())
				scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.periodConflictPenalty);
		}
end

// the activity must be planned in the permitted interval
rule "startFrom"
	when
		$activity : Activity(
			activityType.permittedInterval != null, 
			$activityType : activityType, 
			$activityPeriod : activityPeriod, 
			$activityPeriod != null
		)
	then
		//help(drools, "startFrom");
		int score = 0;

		for (TimeInterval permittedInterval : $activityType.getPermittedInterval()) {

			if ($activityPeriod.getPeriodHour() < permittedInterval.getMinStart().getHour()) {

				score += ($activityPeriod.getPeriodHour() - 
				permittedInterval.getMinStart().getHour()) * 60 + $activityPeriod.getPeriodMinutes() - 
				permittedInterval.getMinStart().getMinutes();

			} else if ($activityPeriod.getPeriodHour() == permittedInterval.getMinStart().getHour()) {

				if ($activityPeriod.getPeriodMinutes() < permittedInterval.getMinStart().getMinutes()) {
					score += $activityPeriod.getPeriodMinutes() - permittedInterval.getMinStart().getMinutes();
				}
	
			} else if ($activityPeriod.getPeriodHour() < permittedInterval.getMaxEnd().getHour()) {

				score = 0;
				break;

			}
		}

		scoreHolder.addHardConstraintMatch(kcontext, score);
end

rule "tillThen"
	when
		$activity : Activity(
			activityType.permittedInterval != null, 
			$activityType : activityType, 
			$activityPeriod : activityPeriod, 
			$activityPeriod != null
		)
	then
		//help(drools, "tillThen");
		ActivityPeriod activityEndPeriod = AdjustActivityPeriod.getAdjustedPeriod($activityPeriod, $activityType.getDuration());
		int score = 0;
		
		for (TimeInterval permittedInterval : $activityType.getPermittedInterval()) {

			if(activityEndPeriod.getPeriodHour() > permittedInterval.getMaxEnd().getHour()) {

				score += (permittedInterval.getMaxEnd().getHour() - 
				activityEndPeriod.getPeriodHour()) * 60 + permittedInterval.getMaxEnd().getMinutes() - 
				activityEndPeriod.getPeriodMinutes();

			} else if (activityEndPeriod.getPeriodHour() == permittedInterval.getMaxEnd().getHour()) {

				if (activityEndPeriod.getPeriodMinutes() > permittedInterval.getMaxEnd().getMinutes()) {

					score += permittedInterval.getMaxEnd().getMinutes() - activityEndPeriod.getPeriodMinutes();
	
				}

			} else if($activityPeriod.getPeriodHour() > permittedInterval.getMinStart().getHour()) {
				score = 0;
				break;
			}
		}
		
		scoreHolder.addHardConstraintMatch(kcontext, score);
end

// the activity must not be planned in the excludedTimeslots
rule "excludedTimeslots"
	when
		$excludedTimePeriodsPenalty : ExcludedTimePeriodsPenalty($excludedActivityType : activityType, excludedActivityPeriods != null)
		Activity(activityType.code == $excludedActivityType.code, $activityPeriod : activityPeriod, $activityPeriod != null)
	then
		List<PeriodInterval> excludedPeriods = $excludedTimePeriodsPenalty.getExcludedActivityPeriods();
		int score = 0;

		// iterate through all excluded timeslots
		for (int i = 0; i < excludedPeriods.size(); i++) {
			PeriodInterval excludedPeriodInterval = excludedPeriods.get(i);

			// excluded just in a specific day or everyday
			if ((excludedPeriodInterval.getStartPeriod().getWeekDay() == null && excludedPeriodInterval.getEndPeriod().getWeekDay() == null) || 
				($activityPeriod.getWeekDayIndex() == excludedPeriodInterval.getStartPeriod().getWeekDayIndex() && 
					$activityPeriod.getWeekDayIndex() == excludedPeriodInterval.getEndPeriod().getWeekDayIndex())) {

				if (checkTimeslots($activityPeriod, excludedPeriodInterval, $excludedActivityType.getDuration(), false, false)) {
					score =+ StaticPenaltyScoresDrools.excludedTimeslotsSameDayPenalty;
				}

			} else { // between days - is not the case for now

				if ($activityPeriod.getWeekDayIndex() > excludedPeriodInterval.getStartPeriod().getWeekDayIndex() && 
					$activityPeriod.getWeekDayIndex() < excludedPeriodInterval.getEndPeriod().getWeekDayIndex()) {

					scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.excludedTimeslotsBetweenDaysPenalty);

				} else if ($activityPeriod.getWeekDayIndex() == excludedPeriodInterval.getStartPeriod().getWeekDayIndex()) {

					if (checkTimeslots($activityPeriod, excludedPeriodInterval, $excludedActivityType.getDuration(), true, false)) {
						scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.excludedTimeslotsBetweenDaysPenalty);
					}

				} else if ($activityPeriod.getWeekDayIndex() == excludedPeriodInterval.getEndPeriod().getWeekDayIndex()) {

					if (checkTimeslots($activityPeriod, excludedPeriodInterval, $excludedActivityType.getDuration(), false, true)) {
						scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.excludedTimeslotsBetweenDaysPenalty);
					}

				}
			}
		}
		
		scoreHolder.addHardConstraintMatch(kcontext, score);
end

// the activity must be planned after another specified activity
rule "activityPeriodPenaltyAfter"
	when
		$relativeActivityPenalty : RelativeActivityPenalty(
			relativeType == RelativeType.AFTER,
			$firstActivityType : firstActivityType,
			$secondActivityType : secondActivityType
		)
		$firstActivity : RelativeActivity(activityType.code == $firstActivityType.code, activityPeriod != null, $firstActivityPeriod : activityPeriod, $index : index)
		$secondActivity : Activity(activityType.code == $secondActivityType.code, activityPeriod != null, $secondActivityPeriod : activityPeriod, $index == index)
	then
		ActivityPeriod secondActivityEndPeriod = AdjustActivityPeriod.getAdjustedPeriod($secondActivityPeriod, $secondActivityType.getDuration());

		if ($secondActivity.getActivityPeriodWeekday().getDayIndex() == $firstActivityPeriod.getWeekDayIndex()) {

			if (secondActivityEndPeriod.getPeriodHour() > $firstActivityPeriod.getPeriodHour()) {

				scoreHolder.addHardConstraintMatch(kcontext, ($firstActivityPeriod.getPeriodHour() - secondActivityEndPeriod.getPeriodHour()) * 60);

			} else if (secondActivityEndPeriod.getPeriodHour() == $firstActivityPeriod.getPeriodHour()) {

				if (secondActivityEndPeriod.getPeriodMinutes() > $firstActivityPeriod.getPeriodMinutes()) {
					scoreHolder.addHardConstraintMatch(kcontext, $firstActivityPeriod.getPeriodMinutes() - secondActivityEndPeriod.getPeriodMinutes());
				}

			} else if ($firstActivityPeriod.getPeriodHour() > secondActivityEndPeriod.getPeriodHour() + 1) {

				scoreHolder.addHardConstraintMatch(kcontext, ($firstActivityPeriod.getPeriodHour() - secondActivityEndPeriod.getPeriodHour() - 1) * (-60));

			} else if ($firstActivityPeriod.getPeriodHour() >= secondActivityEndPeriod.getPeriodHour() && 
				getNumberOfMinutesInPermittedInterval(new TimeInterval(secondActivityEndPeriod.getTime(), $firstActivity.getActivityPeriod().getTime())) 
				< $firstActivity.getOffset()) {

				scoreHolder.addHardConstraintMatch(kcontext, 
					getNumberOfMinutesInPermittedInterval(new TimeInterval(secondActivityEndPeriod.getTime(), 
						$firstActivity.getActivityPeriodTime())) - $firstActivity.getOffset());

			}

		} else { // different days not ok

			scoreHolder.addHardConstraintMatch(kcontext, 
				Math.abs($secondActivity.getActivityPeriodWeekday().getDayIndex() - $firstActivityPeriod.getWeekDayIndex()) * 
				StaticPenaltyScoresDrools.relativeActivityBeforePenaltyDifferentDays);
		}
end

rule "activityPeriodPenaltyBefore"
	when
		$relativeActivityPenalty : RelativeActivityPenalty(
			relativeType == RelativeType.BEFORE,
			$firstActivityType : firstActivityType,
			$secondActivityType : secondActivityType
		)
		$firstActivity : RelativeActivity(activityType.code == $firstActivityType.code, activityPeriod != null, $firstActivityPeriod : activityPeriod, $index : index)
		$secondActivity : Activity(activityType.code == $secondActivityType.code, activityPeriod != null, $secondActivityPeriod : activityPeriod, $index == index)
	then
		ActivityPeriod firstActivityEndPeriod = AdjustActivityPeriod.getAdjustedPeriod($firstActivityPeriod, $firstActivityType.getDuration());

		if ($secondActivityPeriod.getWeekDayIndex() == $firstActivity.getActivityPeriodWeekday().getDayIndex()) {

			if ($secondActivityPeriod.getPeriodHour() < firstActivityEndPeriod.getPeriodHour()) {

				scoreHolder.addHardConstraintMatch(kcontext, ($secondActivityPeriod.getPeriodHour() - firstActivityEndPeriod.getPeriodHour()) * 60);

			} else if ($secondActivityPeriod.getPeriodHour() == firstActivityEndPeriod.getPeriodHour()) {

				if ($secondActivityPeriod.getPeriodMinutes() < firstActivityEndPeriod.getPeriodMinutes()) {
					scoreHolder.addHardConstraintMatch(kcontext, $secondActivityPeriod.getPeriodMinutes() - firstActivityEndPeriod.getPeriodMinutes());
				}

			} else if ($secondActivityPeriod.getPeriodHour() > firstActivityEndPeriod.getPeriodHour() + 1) {
				//scoreHolder.addHardConstraintMatch(kcontext, ($secondActivityPeriod.getPeriodHour() - firstActivityEndPeriod.getPeriodHour() - 1) * (-60));
			}
		} else { // different days not ok

			scoreHolder.addHardConstraintMatch(kcontext, 
				Math.abs($secondActivityPeriod.getWeekDayIndex() - $firstActivity.getActivityPeriodWeekday().getDayIndex()) * 
				StaticPenaltyScoresDrools.relativeActivityAfterPenaltyDifferentDays);
		}
end

rule "instancesPerWeekAssigned"
	when
		$activityType : ActivityType(instancesPerWeek > 1, $instancesPerWeek : instancesPerWeek)
		$pattern : String()
			from accumulate(
				$activity : Activity(activityType.code == $activityType.code, activityPeriod != null, $activityPeriod : activityPeriod),
				init( String pattern = "";
				),
				action(
					pattern += $activityPeriod.getWeekDayIndex();
				),
				result(pattern)
			)
		exists Activity(activityType.code == $activityType.code, activityPeriod != null);
	then
		//help(drools, "instancesPerWeekAssigned");
		String pattern = $pattern;
		//System.out.println("PATTERN: " + pattern);

		boolean respectPattern = false;
		for (String currPattern: DaysPatterns.getPatterns().get($instancesPerWeek)) {

			if (stringToCharacterSet(pattern).containsAll(stringToCharacterSet(currPattern))) {
				respectPattern = true;
			}

		}

		if (!respectPattern) {
			scoreHolder.addHardConstraintMatch(kcontext, StaticPenaltyScoresDrools.instancesPerWeekPenalty);
		}
end

// plan an activity every day, "instancesPerDay" instances in a day
rule "instancesPerDay"
	when
		$activityType : ActivityType(instancesPerDay != 0, $instancesPerDay : instancesPerDay)
		$weekDay : WeekDay()
		$result : String()
			from accumulate(
				$activity : Activity(activityType.code == $activityType.code, activityPeriod != null, $activityPeriod : activityPeriod),
				init( int occurences = 0;
					  String hours = "";
				),
				action(
					// do something more important
					if ($activityPeriod.getWeekDayIndex() == $weekDay.getDayIndex()) {
						occurences++;

						// add the activity time hour to the list
						hours += $activityPeriod.getPeriodHour() + " ";
					}

				),
				result(hours + ":" + occurences)
			)
	then
		//help(drools, "instancesPerDay");

		int indictments = 0;
		String[] resultSplit = $result.split(":");
		int occurences = Integer.valueOf(resultSplit[1]);
		String[] hours = resultSplit[0].split(" ");

		// sort the hours		
		Arrays.sort(hours, new Comparator<String>() {
			public int compare(String s1, String s2) {
				return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
			}
		});

		for (int i = 0; i < hours.length - 1; i++)
			if (Integer.valueOf(hours[i + 1]) - Integer.valueOf(hours[i]) <= 6)
				indictments++;

		scoreHolder.addHardConstraintMatch(kcontext, 
			(Math.abs(occurences - $instancesPerDay) + indictments) * StaticPenaltyScoresDrools.instancesPerDayPenalty);
end

// SOFT CONSTRAINTS
rule "notSoEarly"
	when
		$activity : Activity(
			$activityPeriod : activityPeriod, 
			$activityPeriod != null
		)
	then
		if ($activityPeriod.getPeriodHour() < 6)
			scoreHolder.addSoftConstraintMatch(kcontext, $activityPeriod.getPeriodHour() - 6);
end
